// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::metamodel::operation::*;
import meta::relational::functions::pureToSqlQuery::*;
import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;
import meta::pure::metamodel::relation::*;
import meta::pure::extension::*;

function meta::relational::functions::pureToSqlQuery::processTdsHaving(fe:FunctionExpression[1], pm:PropertyMapping[*], selectWithCursor:SelectWithCursor[1], vars:Map<VariableExpression, ValueSpecification>[1], state:State[1], joinType:JoinType[1], joinName:String[1], tdsResultColumns:List<TDSColumn>[1], debug:DebugContext[1], extensions:Extension[*]):RelationalOperationElement[1]
{
   let havingLambda = $fe.parametersValues->at(1)->cast(@InstanceValue).values->cast(@LambdaFunction<{Any[1]->Any[1]}>)->toOne();
   let havingOperation = meta::relational::functions::pureToSqlQuery::processLambdaAsOperation($havingLambda, $selectWithCursor.select, $vars, $state, $debug, $extensions);
   
   ^$selectWithCursor.select(havingOperation = $havingOperation);
}
