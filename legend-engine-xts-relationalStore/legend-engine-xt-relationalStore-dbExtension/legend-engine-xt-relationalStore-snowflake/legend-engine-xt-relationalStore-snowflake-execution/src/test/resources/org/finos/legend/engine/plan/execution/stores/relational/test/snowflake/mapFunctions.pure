// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::functions::snowflake::*;
import meta::pure::test::*;
import meta::pure::functions::collection::*;

function <<test.Test>> meta::relational::snowflake::tests::testMapInsert():Boolean[1]
{
  let map = newMap([pair('key1', 'value1'), pair('key2', 'value2')]);
  let result = meta::relational::functions::snowflake::mapInsert($map, 'key3', 'value3');
  
  assertEquals(['key1', 'key2', 'key3'], $result->keys()->sort());
  assertEquals(['value1', 'value2', 'value3'], $result->values()->sort());
  assertEquals('value3', $result->get('key3')->toOne());
  
  // Test overwriting existing key
  let overwrittenMap = meta::relational::functions::snowflake::mapInsert($map, 'key1', 'newValue1');
  assertEquals(['key1', 'key2'], $overwrittenMap->keys()->sort());
  assertEquals('newValue1', $overwrittenMap->get('key1')->toOne());
  assertEquals('value2', $overwrittenMap->get('key2')->toOne());
  
  true;
}

function <<test.Test>> meta::relational::snowflake::tests::testMapInsertSQLString():Boolean[1]
{
  let sqlString = meta::relational::functions::snowflake::mapInsertSQLString('myMap', '\'myKey\'', '\'myValue\'');
  assertEquals('MAP_INSERT(myMap, \'myKey\', \'myValue\')', $sqlString);
  
  true;
}
