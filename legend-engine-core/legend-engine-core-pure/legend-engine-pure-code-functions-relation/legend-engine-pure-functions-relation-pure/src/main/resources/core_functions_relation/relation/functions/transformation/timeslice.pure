// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::relation::*;
import meta::pure::functions::date::*;
import meta::pure::functions::collection::*;
import meta::pure::functions::relation::*;

// Basic timeSlice function that takes a timestamp and time unit
native function <<PCT.function>> meta::pure::functions::relation::timeSlice(timestamp:DateTime[1], timeUnit:meta::pure::functions::date::DurationUnit[1]):DateTime[1];

// timeSlice with slice size parameter
native function <<PCT.function>> meta::pure::functions::relation::timeSlice(timestamp:DateTime[1], timeUnit:meta::pure::functions::date::DurationUnit[1], sliceSize:Integer[1]):DateTime[1];

// timeSlice with slice size and end of slice parameters
native function <<PCT.function>> meta::pure::functions::relation::timeSlice(timestamp:DateTime[1], timeUnit:meta::pure::functions::date::DurationUnit[1], sliceSize:Integer[1], endOfSlice:Boolean[1]):DateTime[1];


function <<PCT.test>> meta::pure::functions::relation::tests::timeSlice::testBasicTimeSlice():Boolean[1]
{
    let timestamp = %2023-01-15T14:30:45.123+0000;
    
    // Test with different time units
    let yearResult = timeSlice($timestamp, DurationUnit.YEARS);
    let quarterResult = timeSlice($timestamp, DurationUnit.QUARTERS);  // Using QUARTERS enum value
    let monthResult = timeSlice($timestamp, DurationUnit.MONTHS);
    let weekResult = timeSlice($timestamp, DurationUnit.WEEKS);
    let dayResult = timeSlice($timestamp, DurationUnit.DAYS);
    let hourResult = timeSlice($timestamp, DurationUnit.HOURS);
    let minuteResult = timeSlice($timestamp, DurationUnit.MINUTES);
    let secondResult = timeSlice($timestamp, DurationUnit.SECONDS);
    
    assertEquals(%2023-01-01T00:00:00.000+0000, $yearResult);
    assertEquals(%2023-01-01T00:00:00.000+0000, $quarterResult);
    assertEquals(%2023-01-01T00:00:00.000+0000, $monthResult);
    assertEquals(%2023-01-15T00:00:00.000+0000, $weekResult);
    assertEquals(%2023-01-15T00:00:00.000+0000, $dayResult);
    assertEquals(%2023-01-15T14:00:00.000+0000, $hourResult);
    assertEquals(%2023-01-15T14:30:00.000+0000, $minuteResult);
    assertEquals(%2023-01-15T14:30:45.000+0000, $secondResult);
    
    true;
}

function <<PCT.test>> meta::pure::functions::relation::tests::timeSlice::testTimeSliceWithSliceSize():Boolean[1]
{
    let timestamp = %2023-01-15T14:30:45.123+0000;
    
    // Test with different slice sizes
    let hourResult = timeSlice($timestamp, DurationUnit.HOURS, 2);
    let minuteResult = timeSlice($timestamp, DurationUnit.MINUTES, 15);
    let secondResult = timeSlice($timestamp, DurationUnit.SECONDS, 30);
    
    assertEquals(%2023-01-15T14:00:00.000+0000, $hourResult);
    assertEquals(%2023-01-15T14:30:00.000+0000, $minuteResult);
    assertEquals(%2023-01-15T14:30:30.000+0000, $secondResult);
    
    true;
}

function <<PCT.test>> meta::pure::functions::relation::tests::timeSlice::testTimeSliceWithEndOfSlice():Boolean[1]
{
    let timestamp = %2023-01-15T14:30:45.123+0000;
    
    // Test with end of slice parameter
    let hourStartResult = timeSlice($timestamp, DurationUnit.HOURS, 1, false);
    let hourEndResult = timeSlice($timestamp, DurationUnit.HOURS, 1, true);
    
    assertEquals(%2023-01-15T14:00:00.000+0000, $hourStartResult);
    assertEquals(%2023-01-15T15:00:00.000+0000, $hourEndResult);
    
    true;
}
